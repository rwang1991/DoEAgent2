{
  "openapi": "3.0.0",
  "info": {
    "title": "Enhanced DOE Analysis API",
    "description": "Advanced Design of Experiments analysis with AI Foundry integration, intelligent column mapping, large dataset handling, and comprehensive statistical modeling.\n\n**New Features:**\n- ‚úÖ AI Foundry column mapping (automatically maps generic names to actual columns)\n- ‚úÖ Multiple data input formats (URLs, base64, raw CSV)\n- ‚úÖ Intelligent sampling for large datasets\n- ‚úÖ Simplified API format for easy integration\n- ‚úÖ Enhanced error handling and validation",
    "version": "2.0.0",
    "contact": {
      "name": "Enhanced DOE Analysis Function",
      "url": "https://func-rui-test-doe-westus-e8fjc0c7cthbhzbg.westus-01.azurewebsites.net"
    },
    "x-ai-foundry": {
      "compatible": true,
      "auto-mapping": true,
      "description": "Fully compatible with AI Foundry generic column names"
    }
  },
  "servers": [
    {
      "url": "https://func-rui-test-doe-westus-e8fjc0c7cthbhzbg.westus-01.azurewebsites.net",
      "description": "Azure Function App (Enhanced)"
    }
  ],
  "paths": {
    "/api/doeanalysis": {
      "post": {
        "operationId": "DOE_Analysis_analyzeDOE",
        "summary": "Enhanced DOE Analysis with AI Foundry Integration",
        "description": "Performs comprehensive Design of Experiments analysis with enhanced capabilities:\n\n**üéØ AI Foundry Integration:**\n- Automatically maps generic column names (e.g., \"Temperature\" ‚Üí \"Temp\", \"Dye Concentration\" ‚Üí \"dye1\", \"dye2\")\n- Supports simplified API format for easy integration\n- Handles column name mismatches gracefully\n\n**üìä Data Input Flexibility:**\n- Public URLs (GitHub, Azure Blob, etc.)\n- Base64 encoded CSV data\n- Raw CSV text content\n- Automatic format detection\n\n**‚ö° Performance Features:**\n- Intelligent sampling for large datasets (>1000 rows)\n- Memory usage validation\n- Preserves experimental design structure during sampling\n\n**üî¨ Statistical Analysis:**\n- Response Surface Modeling (RSM)\n- Factor significance testing with LogWorth analysis\n- Multicollinearity detection and handling\n- Lack of fit analysis\n- Model quality assessment across multiple responses\n\n**üõ°Ô∏è Robust Error Handling:**\n- Column validation with helpful error messages\n- Constant predictor filtering\n- Formula parsing for special characters\n- Comprehensive logging and diagnostics",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": ["data", "response_column"],
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Flexible data input supporting multiple formats:\n- **Public URLs**: GitHub raw URLs, Azure Blob URLs, etc.\n- **Base64**: Base64 encoded CSV data\n- **Raw CSV**: Direct CSV text content",
                        "examples": [
                          "https://raw.githubusercontent.com/user/repo/main/data.csv",
                          "VGVtcCxUaW1lLGR5ZTEsZHllMixERSpjbWMK...",
                          "Temp,Time,dye1,dye2,DE*cmc\n150,30,0.5,1.2,75.2"
                        ]
                      },
                      "response_column": {
                        "type": "string",
                        "description": "Response variable(s) to analyze. Supports:\n- Single response: \"DE*cmc\"\n- Multiple responses: \"Dissolution,Hardness,Content_Uniformity\" (comma-separated string)\n\n‚ö†Ô∏è **Important for AI Foundry**: Must be a comma-separated STRING, not an array!",
                        "examples": [
                          "DE*cmc",
                          "Dissolution,Hardness,Content_Uniformity", 
                          "Yield,Purity,Strength"
                        ]
                      },
                      "predictors": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "Optional list of predictor columns. If not specified, function auto-detects suitable predictors.\nSupports AI Foundry generic names that will be automatically mapped:\n- \"Dye Concentration\" ‚Üí dye1, dye2\n- \"Temperature\" ‚Üí Temp\n- \"pH\" ‚Üí Dyeing pH",
                        "example": ["Dye Concentration", "Temperature", "Time", "pH"]
                      },
                      "threshold": {
                        "type": "number",
                        "default": 1.3,
                        "minimum": 1.0,
                        "maximum": 10.0,
                        "description": "LogWorth threshold for factor significance (default 1.3)"
                      },
                      "min_significant": {
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "description": "Minimum significant factors required for modeling"
                      },
                      "max_samples": {
                        "type": "integer",
                        "default": 1000,
                        "minimum": 100,
                        "maximum": 5000,
                        "description": "Maximum number of samples to analyze (intelligent sampling applied if exceeded)"
                      },
                      "force_full_dataset": {
                        "type": "boolean",
                        "default": false,
                        "description": "Force analysis of full dataset regardless of size (use with caution for large datasets)"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": ["data", "response_vars", "predictors"],
                    "properties": {
                      "data": {
                        "type": "string",
                        "description": "Data input (URL, base64, or raw CSV)"
                      },
                      "response_vars": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "Array of response variable column names",
                        "minItems": 1
                      },
                      "predictors": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "Array of predictor variable column names.\n**AI Foundry Mapping Support**: Generic names automatically mapped to actual columns:\n- \"Dye Concentration\" ‚Üí [\"dye1\", \"dye2\", \"dye\", \"concentration\"]\n- \"Temperature\" ‚Üí [\"Temp\", \"temperature\", \"temp\"]\n- \"Time\" ‚Üí [\"Time\", \"time\"]\n- \"pH\" ‚Üí [\"Dyeing pH\", \"pH\", \"ph\"]\n- \"Pressure\" ‚Üí [\"Pressure\", \"pressure\"]\n- \"Flow Rate\" ‚Üí [\"Flow\", \"flow_rate\", \"flowrate\"]",
                        "minItems": 1
                      },
                      "threshold": {"type": "number", "default": 1.3},
                      "min_significant": {"type": "integer", "default": 2},
                      "max_rows": {"type": "integer", "default": 1000, "description": "Legacy parameter name for max_samples"},
                      "force_full_dataset": {"type": "boolean", "default": false}
                    }
                  }
                ]
              },
              "examples": {
                "ai_foundry_simple": {
                  "summary": "AI Foundry Simplified Format (Recommended)",
                  "description": "Easy format for AI Foundry integration with auto-detection",
                  "value": {
                    "data": "https://raw.githubusercontent.com/rwang1991/DoEAgent/refs/heads/main/DOEData_20250622.csv",
                    "response_column": "DE*cmc",
                    "force_full_dataset": true,
                    "threshold": 1.5
                  }
                },
                "ai_foundry_with_predictors": {
                  "summary": "AI Foundry with Predictor Mapping",
                  "description": "Uses AI Foundry generic column names (automatically mapped)",
                  "value": {
                    "data": "https://raw.githubusercontent.com/rwang1991/DoEAgent/refs/heads/main/DOEData_20250622.csv",
                    "response_vars": ["DE*cmc"],
                    "predictors": ["Dye Concentration", "Temperature", "Time", "pH"],
                    "threshold": 1.5,
                    "force_full_dataset": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful DOE analysis with enhanced metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data_info": {
                      "type": "object",
                      "description": "Enhanced metadata about data processing and analysis",
                      "properties": {
                        "analysis_rows": {"type": "integer", "description": "Number of rows actually analyzed"},
                        "was_sampled": {"type": "boolean", "description": "Whether intelligent sampling was applied"},
                        "predictors_used": {
                          "type": "array",
                          "items": {"type": "string"},
                          "description": "Actual predictor columns used in analysis (after mapping and filtering)"
                        },
                        "response_variables": {
                          "type": "array", 
                          "items": {"type": "string"},
                          "description": "Response variables analyzed"
                        }
                      }
                    },
                    "models": {
                      "type": "object",
                      "description": "Statistical models for each response variable",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "summary_of_fit": {
                            "type": "object",
                            "properties": {
                              "r_squared": {
                                "type": "number",
                                "description": "R-squared value (0-1, higher indicates better fit)",
                                "minimum": 0,
                                "maximum": 1
                              },
                              "rmse": {
                                "type": "number", 
                                "description": "Root Mean Square Error (lower is better)",
                                "minimum": 0
                              },
                              "observations": {
                                "type": "integer",
                                "description": "Number of observations used in the model"
                              }
                            }
                          },
                          "significant_factors": {
                            "type": "array",
                            "description": "List of significant factors with their effects",
                            "items": {
                              "type": "object",
                              "properties": {
                                "factor": {"type": "string", "description": "Factor name"},
                                "effect": {"type": "number", "description": "Effect size"},
                                "p_value": {"type": "number", "description": "Statistical p-value"},
                                "logworth": {"type": "number", "description": "-log10(p-value)"}
                              }
                            }
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "simplified_factors": {
                          "type": "array",
                          "items": {"type": "string"},
                          "description": "Significant factors identified across all models"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "successful_analysis": {
                    "summary": "Successful Analysis Result",
                    "value": {
                      "data_info": {
                        "analysis_rows": 298,
                        "was_sampled": false,
                        "predictors_used": ["dye1", "dye2", "Temp", "Time"],
                        "response_variables": ["DE*cmc"]
                      },
                      "models": {
                        "DE*cmc": {
                          "summary_of_fit": {
                            "r_squared": 0.4650,
                            "rmse": 12.34,
                            "observations": 298
                          },
                          "significant_factors": [
                            {
                              "factor": "dye1",
                              "effect": 15.2,
                              "p_value": 0.0001,
                              "logworth": 4.0
                            }
                          ]
                        }
                      },
                      "summary": {
                        "simplified_factors": ["dye1", "dye2", "Temp", "Time"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request with detailed error information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "string", "description": "Error message"},
                    "recommendation": {"type": "string", "description": "Suggested action"}
                  }
                },
                "examples": {
                  "column_mismatch": {
                    "summary": "Column Name Mismatch",
                    "value": {
                      "error": "Missing response column(s): ['Yield']. Available columns: ['dye1', 'dye2', 'Temp', 'Time', 'DE*cmc']",
                      "recommendation": "Check column names or use AI Foundry generic names like 'Dye Concentration', 'Temperature'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-ai-foundry-mapping": {
    "description": "AI Foundry Column Mapping Configuration",
    "mappings": {
      "Dye Concentration": ["dye1", "dye2", "dye", "concentration"],
      "Temperature": ["Temp", "temperature", "temp"],
      "Time": ["Time", "time"],
      "pH": ["Dyeing pH", "pH", "ph"],
      "Pressure": ["Pressure", "pressure"],
      "Flow Rate": ["Flow", "flow_rate", "flowrate"]
    }
  }
}
